/*	Include the OS header files.	*/
FreeRTOS.h
task.h
queue.h
semphr.h

/*	Functions prototypes.	*/
void	Task_Name	( void* pvData );
void 	system_Init ( void );

/*	Service declaration.	*/

/*	Global variables declaration.	*/

int main( void ){
	
	/*	System initialization	*/
	system_Init();
	
	/*	OS service Creation and initialization	*/
	
	/*	Create tasks	*/
	xTaskCreate (Task_Name, Task title, Stack size(Bytes), Parameters, Priority, Handler);
	
	/*	Start the OS	*/
	
}

void Task_Name (void* pvData){
	while (1){
	}
}

void system_Init ( void ){
	
}



*******************************************************************************************
*******************************************************************************************
************************									*******************************
************************			Binary Semaphore		*******************************
************************									*******************************
*******************************************************************************************
*******************************************************************************************
/*	Include the OS header files.	*/
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "semphr.h"
#include "event_groups.h"

/*	Tasks prototypes.	*/
void T_Button (void* pvData);	// Push Button TASK.
void T_LED (void* pvData);		// LED Toggle Task.
void System_Init (void);		// Initialize the System.

/*	Service declaration, Services like Semaphores or MUTEX.	*/
xSemaphoreHandle	Binary_Button_Pressed_Event;

int main(void){
	/*	System initialization	*/
	System_Init ();
	
	/*	OS service Creation and initialization	*/			// Services like Semaphores or MUTEX.
	vSemaphoreCreateBinary(Binary_Button_Pressed_Event,0);	//(Create the semaphore and set its value (0)).
	
	/***************************************	Create tasks	******************************************
	* xTaskCreate(task name,task title, stack size,parameters,priority,handle)
	* task name : Name of Task Function.
	* task title: For debugging purposes.
	* stack size: Size of Task in Stack, Size of local variables and push processes (Bytes).
	* parameters: The argument that the task takes (void* pvData), Pointer to void for generic purposes.
	* priority	: Priority of the TASK. (0 reserved for Idle Task).
	* handle	: (UNKNOWN).		<-----------------------
	*****************************************************************************************************/
	xTaskCreate (T_Button, NULL, 100, NULL, 1, NULL);
	xTaskCreate (T_LED, NULL, 100, NULL, 2, NULL);
	
	/*	Start the OS	*/
	vTaskStartScheduler();
}

void T_LED (void* pvData){
	
	while (1){
		if (xSemaphoreTake(Binary_Button_Pressed_Event,0xFFFF)){
			// This function Check is the Binary_Button Semaphore value has been changed to (1), it returns 1,
			// Else wait for the handler time.
			PORTA ^= 0xFF;
			vTaskDelay(1000);
			PORTA ^= 0xFF;
			vTaskDelay(1000);
		}
	}
}
void T_Button (void* pvData){
	
	while (1){
		if ((PIND & (1 << PD3)) == 0){						// If you pressed on the key.
			xSemaphoreGive(Binary_Button_Pressed_Event);	// Set Semaphore value to (1).
			while ((PIND & (1 << PD3)) == 0);				// Wait until you release the key.
		}
	}
}

void System_Init (void){
	/*	Set Button on port D	*/
	DDRD		|= (1 << PD3);
	PORTD		|= (1 << PD3);
	
	/*	Set LED IC  on port F	*/
	DDRF		|= (1 << PF3);
	PORTF		|= (1 << PF3);
	
	/*	Set LED  on port A	*/
	DDRA		= 0xFF;
	PORTA		= 0xFF;
}


// Error may occurs.
// SIG_OUTPUT_COMPARE1A.
// OUTPUT_COMPARE1A is related to Timer 1.
// So we need the new Timer name in the new version of ATMEGA128 (TIMER1_COMPA_vect).


//Task 1
//When you press button --> Semaphore becomes One.

//Task 2
//Semaphore take to Zero
//Led Flash ON for 1
//Task 2 go to waiting.
//Delay on CPU.
//Task 2 go on and turn off
//Task 2 go to waiting
//Delay 1 sec on CPU



*******************************************************************************************
*******************************************************************************************
************************									*******************************
************************		Counting Semaphore			*******************************
************************									*******************************
*******************************************************************************************
*******************************************************************************************


/*	Include the OS header files.	*/
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "semphr.h"
#include "event_groups.h"

/*	Tasks prototypes.	*/
void T_Button (void* pvData);	// Push Button TASK.
void T_LED (void* pvData);		// LED Toggle Task.
void System_Init (void);		// Initialize the System.

/*	Service declaration, Services like Semaphores or MUTEX.	*/
xSemaphoreHandle Counting_Semaphore;

int main(void){
	/*	System initialization	*/
	System_Init ();
	
	Counting_Semaphore = xSemaphoreCreateCounting(3, 0);
	
	/***************************************	Create tasks	******************************************
	* xTaskCreate(task name,task title, stack size,parameters,priority,handle)
	* task name : Name of Task Function.
	* task title: For debugging purposes.
	* stack size: Size of Task in Stack, Size of local variables and push processes (Bytes).
	* parameters: The argument that the task takes (void* pvData), Pointer to void for generic purposes.
	* priority	: Priority of the TASK. (0 reserved for Idle Task).
	* handle	: (UNKNOWN).		<-----------------------
	*****************************************************************************************************/
	
	xTaskCreate (T_Button, NULL, 100, NULL, 1, NULL);
	xTaskCreate (T_LED, NULL, 100, NULL, 2, NULL);
	
	/*	Start the OS	*/
	vTaskStartScheduler();
}

void T_LED (void* pvData){
	
	while (1){
		if (xSemaphoreTake(Counting_Semaphore,0xFFFF)){
			// This function Check is the Binary_Button Semaphore value has been changed to (1), it returns 1,
			// Else wait for the handler time.
			PORTA ^= 0xFF;
			vTaskDelay(600);
			PORTA ^= 0xFF;
			vTaskDelay(600);
		}
	}
}
void T_Button (void* pvData){
	
	while (1){
		if ((PIND & (1 << PD3)) == 0){						// If you pressed on the key.
			xSemaphoreGive(Counting_Semaphore);				// Set Semaphore value to (1).
			while ((PIND & (1 << PD3)) == 0);				// Wait until you release the key.
		}
	}
}

void System_Init (void){
	/*	Set Button on port D	*/
	DDRD		|= (1 << PD3);
	PORTD		|= (1 << PD3);
	
	/*	Set LED IC  on port F	*/
	DDRF		|= (1 << PF3);
	PORTF		|= (1 << PF3);
	
	/*	Set LED  on port A	*/
	DDRA		= 0xFF;
	PORTA		= 0xFF;
}


// Error may occurs.
// SIG_OUTPUT_COMPARE1A.
// OUTPUT_COMPARE1A is related to Timer 1.
// So we need the new Timer name in the new version of ATMEGA128 (TIMER1_COMPA_vect).


//Task 1
//When you press button --> Semaphore becomes One.

//Task 2
//Semaphore take to Zero
//Led Flash ON for 1
//Task 2 go to waiting.
//Delay on CPU.
//Task 2 go on and turn off
//Task 2 go to waiting
//Delay 1 sec on CPU


*******************************************************************************************
*******************************************************************************************
************************									*******************************
************************			Group Semaphore 		*******************************
************************									*******************************
*******************************************************************************************
*******************************************************************************************



/*	Include the OS header files.	*/
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "semphr.h"
#include "event_groups.h"

/*	Tasks prototypes.	*/
void T_Button (void* pvData);	// Push Button TASK.
void T_LED (void* pvData);		// LED Toggle Task.
void System_Init (void);		// Initialize the System.

/*	Service declaration, Services like Semaphores or MUTEX.	*/
#define Button_0 (1<<0)
#define Button_1 (1<<1)
#define Button_2 (1<<2)
#define Button_3 (1<<3)
EventGroupHandle_t	Event_Group_Buttons;	//Name of Event.
EventBits_t			Event_Bits_Values;		//Value of bits.

int main(void){
	/*	System initialization	*/
	System_Init ();
	
	/*	OS service Creation and initialization	*/
	Event_Group_Buttons = xEventGroupCreate();		//Creation of Group.
	xEventGroupSetBits(Event_Group_Buttons, 4);	
	
	
	
	
	/***************************************	Create tasks	******************************************
	* xTaskCreate(task name,task title, stack size,parameters,priority,handle)
	* task name : Name of Task Function.
	* task title: For debugging purposes.
	* stack size: Size of Task in Stack, Size of local variables and push processes (Bytes).
	* parameters: The argument that the task takes (void* pvData), Pointer to void for generic purposes.
	* priority	: Priority of the TASK. (0 reserved for Idle Task).
	* handle	: (UNKNOWN).		<-----------------------
	*****************************************************************************************************/
	
	xTaskCreate (T_Button, NULL, 100, NULL, 1, NULL);
	xTaskCreate (T_LED, NULL, 100, NULL, 2, NULL);
	
	/*	Start the OS	*/
	vTaskStartScheduler();
}

void T_LED (void* pvData){
	
	while (1){
		
		Event_Bits_Values = xEventGroupWaitBits(Event_Group_Buttons,	//Event handler.
		Button_0|Button_1|Button_2|Button_3,	//4 Bits (Keys).
		1,			// Automatic clear enable.
		1,			// Wait for all bits to set.
		0xFFFF);	// Timeout in waiting list.
		
		 if ((Event_Bits_Values & (Button_0|Button_1|Button_2|Button_3)) == (Button_0|Button_1|Button_2|Button_3)){
			PORTA ^= 0xFF;
			vTaskDelay(1000);
			PORTA ^= 0xFF;
			vTaskDelay(1000);
		}
	}
}
void T_Button (void* pvData){
	
	while (1){
		if ((PIND & (1 << PD3)) == 0){
			xEventGroupSetBits(Event_Group_Buttons, Button_3);
			while ((PIND & (1 << PD3)) == 0);
		}
		
		if ((PIND & (1 << PD2)) == 0){
			xEventGroupSetBits(Event_Group_Buttons, Button_2);
			while ((PIND & (1 << PD2)) == 0);
		}
		
		if ((PIND & (1 << PD1)) == 0){
			xEventGroupSetBits(Event_Group_Buttons, Button_1);
			while ((PIND & (1 << PD1)) == 0);
		}
		
		if ((PIND & (1 << PD0)) == 0){
			xEventGroupSetBits(Event_Group_Buttons, Button_0);
			while ((PIND & (1 << PD0)) == 0);
		}
	}
}

void System_Init (void){
	/*	Set Button on port D	*/
	PORTD		|= 0x0F;
	
	/*	Set LED IC  on port F	*/
	DDRF		|= (1 << PF3);
	PORTF		|= (1 << PF3);
	
	/*	Set LED  on port A	*/
	DDRA		= 0xFF;
	PORTA		= 0xFF;
}


/*

3 tasks

1) Create low task in main.
	- Blink LED for 1 sec on B4.
	- Create T_High
2) T_High takes the CPU.
	- Set buzzer for 1 sec.
	- Take Semaphore.
		Task_H will not take semaphore, so CPU will take the low task.
3) Low task Create Tas_Mid.
	- 
2) 


*******************************************************************************************
*******************************************************************************************
************************									*******************************
************************	RTOS-Group-Events Semaphore		*******************************
************************									*******************************
*******************************************************************************************
*******************************************************************************************


/*	Include the OS header files.	*/
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "semphr.h"
#include "event_groups.h"

/*	Tasks prototypes.	*/
void T_Button (void* pvData);	// Push Button TASK.
void T_LED (void* pvData);		// LED Toggle Task.
void System_Init (void);		// Initialize the System.

/*	Service declaration, Services like Semaphores or MUTEX.	*/
#define Button_0 (1<<0)
#define Button_1 (1<<1)
#define Button_2 (1<<2)
#define Button_3 (1<<3)
EventGroupHandle_t	Event_Group_Buttons;	//Name of Event.
EventBits_t			Event_Bits_Values;		//Value of bits.

int main(void){
	/*	System initialization	*/
	System_Init ();
	
	/*	OS service Creation and initialization	*/
	Event_Group_Buttons = xEventGroupCreate();		//Creation of Group.
	xEventGroupSetBits(Event_Group_Buttons, 4);	
	
	
	
	
	/***************************************	Create tasks	******************************************
	* xTaskCreate(task name,task title, stack size,parameters,priority,handle)
	* task name : Name of Task Function.
	* task title: For debugging purposes.
	* stack size: Size of Task in Stack, Size of local variables and push processes (Bytes).
	* parameters: The argument that the task takes (void* pvData), Pointer to void for generic purposes.
	* priority	: Priority of the TASK. (0 reserved for Idle Task).
	* handle	: (UNKNOWN).		<-----------------------
	*****************************************************************************************************/
	
	xTaskCreate (T_Button, NULL, 100, NULL, 1, NULL);
	xTaskCreate (T_LED, NULL, 100, NULL, 2, NULL);
	
	/*	Start the OS	*/
	vTaskStartScheduler();
}

void T_LED (void* pvData){
	
	while (1){
		
		Event_Bits_Values = xEventGroupWaitBits(Event_Group_Buttons,
		Button_0|Button_1|Button_2|Button_3,
		1,
		1,
		0xFFFF);
		 if ((Event_Bits_Values & (Button_0|Button_1|Button_2|Button_3)) == (Button_0|Button_1|Button_2|Button_3)){
			PORTA ^= 0xFF;
			vTaskDelay(1000);
			PORTA ^= 0xFF;
			vTaskDelay(1000);
		}
	}
}
void T_Button (void* pvData){
	
	while (1){
		if ((PIND & (1 << PD3)) == 0){
			xEventGroupSetBits(Event_Group_Buttons, Button_3);
			while ((PIND & (1 << PD3)) == 0);
		}
		
		if ((PIND & (1 << PD2)) == 0){
			xEventGroupSetBits(Event_Group_Buttons, Button_2);
			while ((PIND & (1 << PD2)) == 0);
		}
		
		if ((PIND & (1 << PD1)) == 0){
			xEventGroupSetBits(Event_Group_Buttons, Button_1);
			while ((PIND & (1 << PD1)) == 0);
		}
		
		if ((PIND & (1 << PD0)) == 0){
			xEventGroupSetBits(Event_Group_Buttons, Button_0);
			while ((PIND & (1 << PD0)) == 0);
		}
	}
}

void System_Init (void){
	/*	Set Button on port D	*/
	DDRD		|= 0x0F;
	PORTD		|= 0x0F;
	
	/*	Set LED IC  on port F	*/
	DDRF		|= (1 << PF3);
	PORTF		|= (1 << PF3);
	
	/*	Set LED  on port A	*/
	DDRA		= 0xFF;
	PORTA		= 0xFF;
}


*******************************************************************************************
*******************************************************************************************
************************									*******************************
************************		RTOS-Mutex-Semaphore 		*******************************
************************									*******************************
*******************************************************************************************
*******************************************************************************************

/*	Include the OS header files.	*/
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "semphr.h"
#include "event_groups.h"
#include <Drivers/usart_driver.h>

/*	Tasks prototypes.	*/
void T_Init (void* pvData);
void T_Send (void* pvData);
void System_Init (void);

/*	Service declaration, Services like Semaphores or MUTEX.	*/
xSemaphoreHandle Mutex_USART0_Resource;

int main(void){
	/*	System initialization	*/
	System_Init ();
	
	/*	Services initialization	*/
	Mutex_USART0_Resource = xSemaphoreCreateMutex();
	
	/*	Create Tasks	*/
	xTaskCreate (T_Init, NULL, 100, NULL, 1, NULL);
	xTaskCreate (T_Send, NULL, 100, NULL, 2, NULL);
	
	/*	Start the OS	*/
	vTaskStartScheduler();
}

void T_Send (void* pvData){

	while (1){
		if (xSemaphoreTake(Mutex_USART0_Resource, 0xFFFF)){	//Take resource, set Mutex to 1.
			usart0_puts("AT+SEND1\n");
			usart0_puts("AT+SEND2\n");
			xSemaphoreGive(Mutex_USART0_Resource);			//Give the resource and reset Mutex 0.
		}
		vTaskDelay(5);		//Task go to wait for 5 ticks, and release resource.
	}
}

void T_Init (void* pvData){

	while (1){
		if (xSemaphoreTake(Mutex_USART0_Resource, 0xFFFF)){		//Take resource, set Mutex to 1.
			usart0_puts("AT+INIT1\n");
			usart0_puts("AT+INIT2\n");
			xSemaphoreGive(Mutex_USART0_Resource);				//Give the resource and reset Mutex 0.
		}
	}
}

void System_Init (void){
	
	usart0_init(9600);
}



*******************************************************************************************
*******************************************************************************************
************************									*******************************
************************		RTOS-Queue Semaphore 		*******************************
************************									*******************************
*******************************************************************************************
*******************************************************************************************

/*	Include the OS header files.	*/
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "semphr.h"
#include "event_groups.h"
#include <Drivers/usart_driver.h>
#include <Drivers/lcd.h>

/*	Tasks prototypes.	*/
void T_Receive (void* pvData);
void T_Send (void* pvData);
void System_Init (void);

/*	Service declaration, Services like Semaphores, MUTEX, and Queues	*/
xQueueHandle mqDisplay;

int main(void){
	/*	System initialization	*/
	System_Init ();
	
	/*	Services initialization	*/
	mqDisplay = xQueueCreate(10, 1);
	
	/*	Create Tasks	*/
	xTaskCreate (T_Receive, NULL, 100, NULL, 2, NULL);
	xTaskCreate (T_Send, NULL, 100, NULL, 1, NULL);
	
	/*	Start the OS	*/
	vTaskStartScheduler();
}

void T_Send (void* pvData){
	
	unsigned char Data = 'T';
	while (1){
		vTaskDelay (1500);
		xQueueSend(mqDisplay, &Data, 1000);
	}
}
void T_Receive (void* pvData){
	
	unsigned char Data = 'R';
	while (1){
		xQueueReceive(mqDisplay, &Data, 300);
		LCD_DispChar(Data);
	}
}

void System_Init (void){
	
	LCD_Init();
}
